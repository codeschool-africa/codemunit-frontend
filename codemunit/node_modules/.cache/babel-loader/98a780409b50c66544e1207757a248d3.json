{"ast":null,"code":"import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/objectWithoutPropertiesLoose';\nimport { useRef, useEffect, createElement } from 'react';\nimport { useGetSetState, useEffectOnce, useUpdateEffect } from 'react-use';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nvar clamp = function clamp(num, lower, upper) {\n  num = num <= upper ? num : upper;\n  num = num >= lower ? num : lower;\n  return num;\n};\n\nvar increment = function increment(progress) {\n  var amount = 0;\n\n  if (progress >= 0 && progress < 0.2) {\n    amount = 0.1;\n  } else if (progress >= 0.2 && progress < 0.5) {\n    amount = 0.04;\n  } else if (progress >= 0.5 && progress < 0.8) {\n    amount = 0.02;\n  } else if (progress >= 0.8 && progress < 0.99) {\n    amount = 0.005;\n  }\n\n  return clamp(progress + amount, 0, 0.994);\n};\n\nvar isRunning = false;\nvar pending = [];\n\nvar next = function next() {\n  isRunning = true;\n  var cb = pending.shift();\n\n  if (cb) {\n    return cb(next);\n  }\n\n  isRunning = false;\n};\n\nvar clear = function clear() {\n  isRunning = false;\n  pending = [];\n};\n\nvar queue = function queue(cb) {\n  pending.push(cb);\n\n  if (!isRunning && pending.length === 1) {\n    next();\n  }\n};\n\nvar handle;\n\nvar cancel = function cancel() {\n  if (handle) {\n    window.cancelAnimationFrame(handle);\n  }\n};\n\nvar timeout = function timeout(callback, delay) {\n  var deltaTime;\n  var start;\n\n  var frame = function frame(time) {\n    start = start || time;\n    deltaTime = time - start;\n\n    if (deltaTime > delay) {\n      callback();\n      return;\n    }\n\n    handle = window.requestAnimationFrame(frame);\n  };\n\n  handle = window.requestAnimationFrame(frame);\n};\n/* istanbul ignore next */\n\n\nvar noop = function noop() {\n  return undefined;\n};\n\nvar initialState = {\n  isFinished: false,\n  progress: 0,\n  sideEffect: noop\n};\n\nvar cleanup = function cleanup() {\n  cancel();\n  clear();\n};\n\nvar useNProgress = function useNProgress(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$animationDuratio = _ref.animationDuration,\n      animationDuration = _ref$animationDuratio === void 0 ? 200 : _ref$animationDuratio,\n      _ref$incrementDuratio = _ref.incrementDuration,\n      incrementDuration = _ref$incrementDuratio === void 0 ? 800 : _ref$incrementDuratio,\n      _ref$isAnimating = _ref.isAnimating,\n      isAnimating = _ref$isAnimating === void 0 ? false : _ref$isAnimating,\n      _ref$minimum = _ref.minimum,\n      minimum = _ref$minimum === void 0 ? 0.08 : _ref$minimum;\n\n  var _useGetSetState = useGetSetState(initialState),\n      get = _useGetSetState[0],\n      setState = _useGetSetState[1];\n\n  var set = function set(n) {\n    n = clamp(n, minimum, 1);\n\n    if (n === 1) {\n      cleanup();\n      queue(function (next) {\n        setState({\n          progress: n,\n          sideEffect: function sideEffect() {\n            return timeout(next, animationDuration);\n          }\n        });\n      });\n      queue(function () {\n        setState({\n          isFinished: true,\n          sideEffect: cleanup\n        });\n      });\n      return;\n    }\n\n    queue(function (next) {\n      setState({\n        progress: n,\n        sideEffect: function sideEffect() {\n          return timeout(next, animationDuration);\n        }\n      });\n    });\n  };\n\n  var trickle = function trickle() {\n    set(increment(get().progress));\n  };\n\n  var start = function start() {\n    var work = function work() {\n      trickle();\n      queue(function (next) {\n        timeout(function () {\n          work();\n          next();\n        }, incrementDuration);\n      });\n    };\n\n    work();\n  };\n\n  var savedTrickle = useRef(noop);\n  useEffect(function () {\n    savedTrickle.current = trickle;\n  });\n  useEffectOnce(function () {\n    if (isAnimating) {\n      start();\n    }\n\n    return cleanup;\n  });\n  useUpdateEffect(function () {\n    get().sideEffect();\n  }, [get().sideEffect]);\n  useUpdateEffect(function () {\n    if (!isAnimating) {\n      set(1);\n    } else {\n      setState({\n        sideEffect: start\n      });\n    }\n  }, [isAnimating]);\n  return {\n    animationDuration: animationDuration,\n    isFinished: get().isFinished,\n    progress: get().progress\n  };\n};\n\nvar NProgress = function NProgress(_ref) {\n  var children = _ref.children,\n      restProps = _objectWithoutPropertiesLoose(_ref, [\"children\"]);\n\n  var renderProps = useNProgress(restProps);\n  return children(renderProps);\n};\n\nfunction withNProgress(BaseComponent) {\n  var WithNProgress = function WithNProgress(props) {\n    var hookProps = useNProgress(props);\n    return createElement(BaseComponent, Object.assign({}, props, hookProps));\n  };\n\n  hoistNonReactStatics(WithNProgress, BaseComponent);\n  return WithNProgress;\n}\n\nexport { NProgress, useNProgress, withNProgress };","map":null,"metadata":{},"sourceType":"module"}